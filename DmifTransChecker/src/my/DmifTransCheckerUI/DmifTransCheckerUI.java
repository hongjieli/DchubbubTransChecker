/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.DmifTransCheckerUI;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author honli
 */
public class DmifTransCheckerUI extends javax.swing.JFrame {

    /**
     * Creates new form DmifTransCheckerUI
     */
    public DmifTransCheckerUI() {
        initComponents();
        this.jDataSetIP = new DataSet();
        this.jDataSetSoC = new DataSet();
        this.bIPOpened = false;
        this.bSoCOpened = false;
        this.vIPDataSet  = new Vector();
        this.vSoCDataSet = new Vector();
        
        this.selectedSoCIndex = -1;
        this.selectedIPIndex = -1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneIP = new javax.swing.JTabbedPane();
        jPanelIP = new javax.swing.JPanel();
        jLabelOutDirIP = new javax.swing.JLabel();
        jLabelScriptIP = new javax.swing.JLabel();
        jTextFieldOutDirIP = new javax.swing.JTextField();
        jTextFieldScriptIP = new javax.swing.JTextField();
        StartIPAnalyze = new javax.swing.JButton();
        jScrollPaneIP = new javax.swing.JScrollPane();
        jTableIP = new javax.swing.JTable();
        jPanelSoC = new javax.swing.JPanel();
        jLabelOutDirSoC = new javax.swing.JLabel();
        jLabelScriptSoC = new javax.swing.JLabel();
        jTextFieldOutDirSoC = new javax.swing.JTextField();
        jTextFieldScriptSoC = new javax.swing.JTextField();
        StartSoCAnalyze = new javax.swing.JButton();
        jScrollPaneSoC = new javax.swing.JScrollPane();
        jTableSoC = new javax.swing.JTable();
        jPanelCompare = new javax.swing.JPanel();
        jScrollPaneCompareSoC = new javax.swing.JScrollPane();
        jTableCompareSoC = new javax.swing.JTable();
        jScrollPaneCompareIP = new javax.swing.JScrollPane();
        jTableCompareIP = new javax.swing.JTable();
        StartIPSoCCompare = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DmifTransChecker");
        setPreferredSize(new java.awt.Dimension(1270, 800));

        jTabbedPaneIP.setToolTipText("");
        jTabbedPaneIP.setPreferredSize(new java.awt.Dimension(1280, 800));

        jLabelOutDirIP.setText("Output directory of IP");

        jLabelScriptIP.setText("Analyze script of IP");

        StartIPAnalyze.setText("GO");
        StartIPAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartIPAnalyzeActionPerformed(evt);
            }
        });

        jTableIP.setFont(new java.awt.Font("Bitstream Vera Sans", 0, 13)); // NOI18N
        jTableIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableIP.setToolTipText("");
        jTableIP.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTableIP.setOpaque(false);
        jTableIP.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableIP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableIPMouseClicked(evt);
            }
        });
        jScrollPaneIP.setViewportView(jTableIP);
        jTableIP.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanelIPLayout = new javax.swing.GroupLayout(jPanelIP);
        jPanelIP.setLayout(jPanelIPLayout);
        jPanelIPLayout.setHorizontalGroup(
            jPanelIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelIPLayout.createSequentialGroup()
                        .addComponent(StartIPAnalyze)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelIPLayout.createSequentialGroup()
                        .addGroup(jPanelIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelOutDirIP)
                            .addComponent(jLabelScriptIP))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldOutDirIP, javax.swing.GroupLayout.DEFAULT_SIZE, 1085, Short.MAX_VALUE)
                            .addComponent(jTextFieldScriptIP)))
                    .addComponent(jScrollPaneIP))
                .addContainerGap())
        );
        jPanelIPLayout.setVerticalGroup(
            jPanelIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelIPLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOutDirIP)
                    .addComponent(jTextFieldOutDirIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanelIPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelScriptIP)
                    .addComponent(jTextFieldScriptIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(StartIPAnalyze)
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneIP, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPaneIP.addTab("IP", jPanelIP);

        jLabelOutDirSoC.setText("Output directory of SoC");

        jLabelScriptSoC.setText("Analyze script of SoC");

        jTextFieldScriptSoC.setToolTipText("");

        StartSoCAnalyze.setText("GO");
        StartSoCAnalyze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartSoCAnalyzeActionPerformed(evt);
            }
        });

        jTableSoC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPaneSoC.setViewportView(jTableSoC);

        javax.swing.GroupLayout jPanelSoCLayout = new javax.swing.GroupLayout(jPanelSoC);
        jPanelSoC.setLayout(jPanelSoCLayout);
        jPanelSoCLayout.setHorizontalGroup(
            jPanelSoCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSoCLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSoCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSoCLayout.createSequentialGroup()
                        .addGroup(jPanelSoCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelOutDirSoC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelScriptSoC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelSoCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldOutDirSoC, javax.swing.GroupLayout.DEFAULT_SIZE, 1070, Short.MAX_VALUE)
                            .addComponent(jTextFieldScriptSoC, javax.swing.GroupLayout.DEFAULT_SIZE, 1070, Short.MAX_VALUE)))
                    .addGroup(jPanelSoCLayout.createSequentialGroup()
                        .addComponent(StartSoCAnalyze)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPaneSoC))
                .addContainerGap())
        );
        jPanelSoCLayout.setVerticalGroup(
            jPanelSoCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSoCLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSoCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelOutDirSoC)
                    .addComponent(jTextFieldOutDirSoC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelSoCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelScriptSoC)
                    .addComponent(jTextFieldScriptSoC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(StartSoCAnalyze)
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneSoC, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPaneIP.addTab("SoC", jPanelSoC);

        jTableCompareSoC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableCompareSoC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCompareSoCMouseClicked(evt);
            }
        });
        jScrollPaneCompareSoC.setViewportView(jTableCompareSoC);

        jTableCompareIP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableCompareIP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCompareIPMouseClicked(evt);
            }
        });
        jScrollPaneCompareIP.setViewportView(jTableCompareIP);

        StartIPSoCCompare.setText("Compare");
        StartIPSoCCompare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartIPSoCCompareActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCompareLayout = new javax.swing.GroupLayout(jPanelCompare);
        jPanelCompare.setLayout(jPanelCompareLayout);
        jPanelCompareLayout.setHorizontalGroup(
            jPanelCompareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCompareLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCompareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneCompareSoC)
                    .addGroup(jPanelCompareLayout.createSequentialGroup()
                        .addComponent(StartIPSoCCompare)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPaneCompareIP, javax.swing.GroupLayout.DEFAULT_SIZE, 1238, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelCompareLayout.setVerticalGroup(
            jPanelCompareLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCompareLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneCompareIP, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addComponent(StartIPSoCCompare)
                .addGap(18, 18, 18)
                .addComponent(jScrollPaneCompareSoC, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPaneIP.addTab("Compare", jPanelCompare);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneIP, javax.swing.GroupLayout.DEFAULT_SIZE, 1270, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneIP, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTableIPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableIPMouseClicked
        // TODO add your handling code here:
        System.out.println(this.jTableIP.getSelectedRow());
    }//GEN-LAST:event_jTableIPMouseClicked

    private void StartIPAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartIPAnalyzeActionPerformed
        // TODO add your handling code here:

        this.bIPOpened = false;
        //Init table data
        this.jDataSetIP.CleanUp();

        DefaultTableModel jReqTableModel = new DefaultTableModel(this.jDataSetIP.DataSrc, this.jDataSetIP.ColName);
        this.jTableIP.setModel(jReqTableModel);
        this.jTableIP.repaint();
        this.jTableIP.updateUI();

        System.out.println("IP GO button click.");
        String jOutputDirText = jTextFieldOutDirIP.getText();
        String jScriptDirText = jTextFieldScriptIP.getText();

        if (jOutputDirText.isEmpty() || jScriptDirText.isEmpty()){
            JOptionPane.showMessageDialog(null, "Both two text field need to be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        System.out.println("jOutputDirText: " + jOutputDirText + "\njScriptDirText: " + jScriptDirText);

        String jFileReqTxt = jOutputDirText + System.getProperty("file.separator") + "dmif_freq_soc_monitor.txt";
        if(new File(jFileReqTxt).exists()) {
            System.out.println(jFileReqTxt + " exists");
        }
        else{
            JOptionPane.showMessageDialog(null, jFileReqTxt + " do not exist", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String jFileRetTxt = jOutputDirText + System.getProperty("file.separator") + "dmif_fret_soc_monitor.txt";
        if(new File(jFileRetTxt).exists()) {
            System.out.println(jFileRetTxt + " exists");
        }
        else{
            JOptionPane.showMessageDialog(null, jFileRetTxt + " do not exist", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String jFileScript = jScriptDirText + System.getProperty("file.separator") + "dmif_soc_monitor_analyzer.pl";
        if(new File(jFileScript).exists()) {
            System.out.println(jFileScript + " exists");
        }
        else{
            JOptionPane.showMessageDialog(null, jFileScript + " do not exist", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String lineToRead;
        try {
            String jCmd = "perl " + jFileScript + " -dir " + jOutputDirText;
            System.out.println(jCmd);
            Process jProc = Runtime.getRuntime().exec(jCmd);
            InputStream inputStream = jProc.getInputStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            if ((lineToRead = bufferedReader.readLine()) != null) {
                System.out.println(lineToRead);
                if(lineToRead.equals("PASSED")){
                    System.out.println("Script running properly");
                }
                else{
                    System.out.println("Error: " + bufferedReader.toString());
                    JOptionPane.showMessageDialog(null, "Error: " + bufferedReader.toString(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(DmifTransCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        String jOutputPath = jOutputDirText + System.getProperty("file.separator") + "_out.tmp";
        File jReqOutFile = new File(jOutputPath);
        if(jReqOutFile.isFile() && jReqOutFile.exists()){
            InputStreamReader read = null;
            try {
                System.out.println(jOutputPath + " found");
                read = new InputStreamReader(new FileInputStream(jReqOutFile));
                BufferedReader bufferedReader = new BufferedReader(read);
                String lineTxt = null;
                while((lineTxt = bufferedReader.readLine()) != null){
                    String[] strArray = lineTxt.split(" ");
                    if(strArray.length == 10){
                        Vector jReqElement = new Vector();
                        jReqElement.addElement(strArray[0]);
                        jReqElement.addElement(strArray[1]);
                        jReqElement.addElement("0x" + Integer.toHexString(Integer.parseInt(strArray[2])));
                        jReqElement.addElement(strArray[3]);
                        jReqElement.addElement(strArray[9]);
                        jReqElement.addElement(strArray[7]);
                        jReqElement.addElement(strArray[8]);

                        this.jDataSetIP.DataSrc.addElement(jReqElement);
                    }
                    else{
                        System.out.println("Error: Data Format mismatch");
                        return ;
                    }
                }   read.close();

                this.jSetTableColWidth(0, 100, jTableIP);
                this.jSetTableColWidth(1, 100, jTableIP);
                this.jSetTableColWidth(2, 80, jTableIP);
                this.jSetTableColWidth(3, 100, jTableIP);
                this.jSetTableColWidth(4, 80, jTableIP);

                this.jTableIP.repaint();
                this.jTableIP.updateUI();
                this.bIPOpened = true;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DmifTransCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(DmifTransCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    read.close();
                } catch (IOException ex) {
                    Logger.getLogger(DmifTransCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else{
            System.out.println("Error: " + jOutputPath + " not found");
        }
    }//GEN-LAST:event_StartIPAnalyzeActionPerformed

    private void StartSoCAnalyzeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartSoCAnalyzeActionPerformed
        // TODO add your handling code here:
        
        this.bSoCOpened = false;
        //Init table data
        this.jDataSetSoC.CleanUp();

        DefaultTableModel jReqTableModel = new DefaultTableModel(this.jDataSetSoC.DataSrc, this.jDataSetSoC.ColName);
        this.jTableSoC.setModel(jReqTableModel);
        this.jTableSoC.repaint();
        this.jTableSoC.updateUI();

        System.out.println("SoC GO button click.");
        String jOutputDirText = jTextFieldOutDirSoC.getText();
        String jScriptDirText = jTextFieldScriptSoC.getText();

        if (jOutputDirText.isEmpty() || jScriptDirText.isEmpty()){
            JOptionPane.showMessageDialog(null, "Both two text field need to be filled in", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        System.out.println("jOutputDirText: " + jOutputDirText + "\njScriptDirText: " + jScriptDirText);

        String jFileReqTxt = jOutputDirText + System.getProperty("file.separator") + "dmif_freq_soc_monitor.txt";
        if(new File(jFileReqTxt).exists()) {
            System.out.println(jFileReqTxt + " exists");
        }
        else{
            JOptionPane.showMessageDialog(null, jFileReqTxt + " do not exist", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String jFileRetTxt = jOutputDirText + System.getProperty("file.separator") + "dmif_fret_soc_monitor.txt";
        if(new File(jFileRetTxt).exists()) {
            System.out.println(jFileRetTxt + " exists");
        }
        else{
            JOptionPane.showMessageDialog(null, jFileRetTxt + " do not exist", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String jFileScript = jScriptDirText + System.getProperty("file.separator") + "dmif_soc_monitor_analyzer.pl";
        if(new File(jFileScript).exists()) {
            System.out.println(jFileScript + " exists");
        }
        else{
            JOptionPane.showMessageDialog(null, jFileScript + " do not exist", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String lineToRead;
        try {
            String jCmd = "perl " + jFileScript + " -dir " + jOutputDirText;
            System.out.println(jCmd);
            Process jProc = Runtime.getRuntime().exec(jCmd);
            InputStream inputStream = jProc.getInputStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            if ((lineToRead = bufferedReader.readLine()) != null) {
                System.out.println(lineToRead);
                if(lineToRead.compareTo("PASSED") == 0){
                    System.out.println("Script running properly");
                }
                else{
                    System.out.println("Error: " + bufferedReader.toString());
                    JOptionPane.showMessageDialog(null, "Error: " + bufferedReader.toString(), "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(DmifTransCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        String jOutputPath = jOutputDirText + System.getProperty("file.separator") + "_out.tmp";
        File jReqOutFile = new File(jOutputPath);
        if(jReqOutFile.isFile() && jReqOutFile.exists()){
            InputStreamReader read = null;
            try {
                System.out.println(jOutputPath + " found");
                read = new InputStreamReader(new FileInputStream(jReqOutFile));
                BufferedReader bufferedReader = new BufferedReader(read);
                String lineTxt = null;
                while((lineTxt = bufferedReader.readLine()) != null){
                    String[] strArray = lineTxt.split(" ");
                    if(strArray.length == 10){
                        Vector jReqElement = new Vector();
                        jReqElement.addElement(strArray[0]);
                        jReqElement.addElement(strArray[1]);
                        jReqElement.addElement("0x" + Integer.toHexString(Integer.parseInt(strArray[2])));
                        jReqElement.addElement(strArray[3]);
                        jReqElement.addElement(strArray[9]);
                        jReqElement.addElement(strArray[7]);
                        jReqElement.addElement(strArray[8]);

                        this.jDataSetSoC.DataSrc.addElement(jReqElement);
                    }
                    else{
                        System.out.println("Error: Data Format mismatch");
                        return ;
                    }
                }   read.close();

                this.jSetTableColWidth(0, 100, jTableSoC);
                this.jSetTableColWidth(1, 100, jTableSoC);
                this.jSetTableColWidth(2, 80, jTableSoC);
                this.jSetTableColWidth(3, 100, jTableSoC);
                this.jSetTableColWidth(4, 80, jTableSoC);

                this.jTableSoC.repaint();
                this.jTableSoC.updateUI();
                this.bSoCOpened = true;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DmifTransCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(DmifTransCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    read.close();
                } catch (IOException ex) {
                    Logger.getLogger(DmifTransCheckerUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        else{
            System.out.println("Error: " + jOutputPath + " not found");
        }
    }//GEN-LAST:event_StartSoCAnalyzeActionPerformed

    private void StartIPSoCCompareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartIPSoCCompareActionPerformed
        // TODO add your handling code here:
        if(this.bIPOpened && this.bSoCOpened){
            this.vIPDataSet.clear();
            this.vSoCDataSet.clear();
            
            this.vIPDataSet.addAll(this.jDataSetIP.DataSrc);
            this.vSoCDataSet.addAll(this.jDataSetSoC.DataSrc);
            
            for (int i = 0; i < vIPDataSet.size(); ){
                boolean bFound = false;
                Vector vIPElement = (Vector) vIPDataSet.elementAt(i);
                String vIPTag = (String) vIPElement.elementAt(2);
                String vIPData1 = (String) vIPElement.elementAt(5);
                String vIPData2 = (String) vIPElement.elementAt(6);
                for (int j = 0; j < vSoCDataSet.size();){
                    Vector vSoCElement = (Vector) vSoCDataSet.elementAt(j);
                    String vSoCTag = (String) vSoCElement.elementAt(2);
                    String vSoCData1 = (String) vSoCElement.elementAt(5);
                    String vSoCData2 = (String) vSoCElement.elementAt(6);
                    
                    if(vIPTag.equals(vSoCTag) && vIPData1.equals(vSoCData1) && vIPData2.equals(vSoCData2)){                        
                        vSoCDataSet.remove(j);
                        bFound = true;
                        break;
                    }
                    else{
                        j++;
                    }                    
                }
                if(bFound){
                    vIPDataSet.remove(i);
                    continue;
                }
                else{
                    i++;
                }
            }            
            DefaultTableModel jOutIPTableModel = new DefaultTableModel(vIPDataSet, this.jDataSetIP.ColName);
            this.jTableCompareIP.setModel(jOutIPTableModel);

            this.jSetTableColWidth(0, 100, jTableCompareIP);
            this.jSetTableColWidth(1, 100, jTableCompareIP);
            this.jSetTableColWidth(2, 80, jTableCompareIP);
            this.jSetTableColWidth(3, 100, jTableCompareIP);
            this.jSetTableColWidth(4, 80, jTableCompareIP);

            this.jTableCompareIP.repaint();
            this.jTableCompareIP.updateUI();
            
            DefaultTableModel jOutSoCTableModel = new DefaultTableModel(vSoCDataSet, this.jDataSetSoC.ColName);
            this.jTableCompareSoC.setModel(jOutSoCTableModel);

            this.jSetTableColWidth(0, 100, jTableCompareSoC);
            this.jSetTableColWidth(1, 100, jTableCompareSoC);
            this.jSetTableColWidth(2, 80, jTableCompareSoC);
            this.jSetTableColWidth(3, 100, jTableCompareSoC);
            this.jSetTableColWidth(4, 80, jTableCompareSoC);

            this.jTableCompareSoC.repaint();
            this.jTableCompareSoC.updateUI();
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Need to open analyze IP and SoC results first", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_StartIPSoCCompareActionPerformed

    private void jTableCompareSoCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCompareSoCMouseClicked
        // TODO add your handling code here:
        this.selectedSoCIndex = -1;
        System.out.println(this.jTableCompareSoC.getName() + ": " + this.jTableCompareSoC.getSelectedRow() + " has been selected.");
        this.selectedSoCIndex = this.jTableCompareSoC.getSelectedRow();
        System.out.println(this.jTableCompareSoC.getName() + ": " + this.vSoCDataSet.get(selectedSoCIndex));
        if(this.selectedSoCIndex != -1){
            Vector vSelectedEntry = (Vector) this.vSoCDataSet.get(selectedSoCIndex);
            for(int i = 0; i < this.jDataSetSoC.DataSrc.size(); i++){
                Vector vIter = (Vector) this.jDataSetSoC.DataSrc.elementAt(i);
                if (vIter == vSelectedEntry){
                    this.jTableSoC.setRowSelectionInterval(i, i);
                }
            }
        }
    }//GEN-LAST:event_jTableCompareSoCMouseClicked

    private void jTableCompareIPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCompareIPMouseClicked
        // TODO add your handling code here:
        this.selectedIPIndex = -1;
        System.out.println(this.jTableCompareIP.getName() + ": " + this.jTableCompareIP.getSelectedRow() + " has been selected.");
        this.selectedIPIndex = this.jTableCompareIP.getSelectedRow();
        System.out.println(this.jTableCompareIP.getName() + ": " + this.vIPDataSet.get(selectedIPIndex));
        if(this.selectedIPIndex != -1){
            Vector vSelectedEntry = (Vector) this.vIPDataSet.get(selectedIPIndex);
            for(int i = 0; i < this.jDataSetIP.DataSrc.size(); i++){
                Vector vIter = (Vector) this.jDataSetIP.DataSrc.elementAt(i);
                if (vIter == vSelectedEntry){
                    this.jTableIP.setRowSelectionInterval(i, i);
                }
            }
        }
    }//GEN-LAST:event_jTableCompareIPMouseClicked

    private void jSetTableColWidth(int index, int width, JTable jTableIns){
        TableColumn Column = jTableIns.getColumnModel().getColumn(index);
        Column.setPreferredWidth(width);
        Column.setMaxWidth(width);
        Column.setMinWidth(width);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DmifTransCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DmifTransCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DmifTransCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DmifTransCheckerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DmifTransCheckerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton StartIPAnalyze;
    private javax.swing.JButton StartIPSoCCompare;
    private javax.swing.JButton StartSoCAnalyze;
    private javax.swing.JLabel jLabelOutDirIP;
    private javax.swing.JLabel jLabelOutDirSoC;
    private javax.swing.JLabel jLabelScriptIP;
    private javax.swing.JLabel jLabelScriptSoC;
    private javax.swing.JPanel jPanelCompare;
    private javax.swing.JPanel jPanelIP;
    private javax.swing.JPanel jPanelSoC;
    private javax.swing.JScrollPane jScrollPaneCompareIP;
    private javax.swing.JScrollPane jScrollPaneCompareSoC;
    private javax.swing.JScrollPane jScrollPaneIP;
    private javax.swing.JScrollPane jScrollPaneSoC;
    private javax.swing.JTabbedPane jTabbedPaneIP;
    private javax.swing.JTable jTableCompareIP;
    private javax.swing.JTable jTableCompareSoC;
    private javax.swing.JTable jTableIP;
    private javax.swing.JTable jTableSoC;
    private javax.swing.JTextField jTextFieldOutDirIP;
    private javax.swing.JTextField jTextFieldOutDirSoC;
    private javax.swing.JTextField jTextFieldScriptIP;
    private javax.swing.JTextField jTextFieldScriptSoC;
    // End of variables declaration//GEN-END:variables
    private DataSet jDataSetIP;
    private DataSet jDataSetSoC;
    private boolean bIPOpened;
    private boolean bSoCOpened;
    private Vector vIPDataSet;
    private Vector vSoCDataSet;
    private int selectedSoCIndex;
    private int selectedIPIndex;
}
